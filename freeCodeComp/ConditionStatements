//Use Conditional Logic with If Statements
function test (myCondition) {
    if (myCondition) {
      return "It was true";
    }
    return "It was false";
  }
  
  test(true);
  test(false);

  //There are many comparison operators in JavaScript. All of these operators return a boolean true or false value.
  //The most basic operator is the equality operator ==.
    //1   ==  1  // true
    //1   ==  2  // false
    //1   == '1' // true
    //"3" ==  3  // true
function equalityTest(myVal) {
    if (myVal == 10) {
        return "Equal";
    }
    return "Not Equal";
    }

    //Comparison with the Strict Equality Operator
    //3 ===  3  // true
    //3 === '3' // false
function testStrict(val) {
    if (val===7) { 
        return "Equal";
    }
    return "Not Equal";
    }
    
    testStrict(10);

    //Note: In JavaScript, you can determine the type of a variable or a value with the typeof operator, as follows:
    typeof 3
    typeof '3'

  /*
  The strict inequality operator (!==) is the logical opposite of the strict equality operator.
  It means "Strictly Not Equal" and returns false where strict equality would return true and vice versa.
  The strict inequality operator will not convert data types.
  */
 /*
 The greater than operator (>) compares the values of two numbers.
 If the number to the left is greater than the number to the right, it returns true.
 Otherwise, it returns false.
Like the equality operator, the greater than operator will convert data types of 
values while comparing.
 */
function testGreaterThan(val) {
    if (val> 100) {  
      return "Over 100";
    }
  
    if (val> 10) {
      return "Over 10";
    }
  
    return "10 or Under";
  }
  
  testGreaterThan(10);


    /*
Sometimes you will need to test more than one thing at a time. 
The logical and operator (&&) returns true if and only if the 
operands to the left and right of it are true.
The same effect could be achieved by nesting an if statement inside another if:
    */

if (num > 5) {
    if (num < 10) {
      return "Yes";
    }
  }
  return "No";

  // above function is equal to below function

  if (num > 5 && num < 10) {
    return "Yes";
  }
  return "No";


  /*
  The logical or operator (||) returns true if either of the operands is true.
  Otherwise, it returns false.
  */

  function testLogicalOr(val) {
  
    if (val< 10 || val > 20) {
      return "Outside";
    }
    return "Inside";
  }
  
  testLogicalOr(15);

  /**If you have multiple conditions that need to be addressed,
   you can chain if statements together with else if statements. */
   function testElseIf(val) {
    if (val > 10) {
      return "Greater than 10";
    } else if(val < 5) {
      return "Smaller than 5";
    } else {
      return "Between 5 and 10";
    }
  }
  testElseIf(7);

  //chaining if/else if
  const names = ["Hole-in-one!", "Eagle", "Birdie", "Par", "Bogey", "Double Bogey", "Go Home!"];

function golfScore(par, strokes) {
  return strokes === 1
    ? names[0]
    : strokes <= par - 2
    ? names[1]
    : strokes === par - 1
    ? names[2]
    : strokes === par
    ? names[3]
    : strokes === par + 1
    ? names[4]
    : strokes === par + 2
    ? names[5]
    : names[6];
}
//OR

function golfScore(par, strokes) {
  if (strokes == 1) {
    return names[0];
  } else if (strokes <= par - 2) {
    return names[1];
  } else if (strokes === par - 1) {
    return names[2];
  } else if (strokes === par) {
    return names[3];
  } else if (strokes === par + 1) {
    return names[4];
  } else if (strokes === par + 2) {
    return names[5];
  } else {
    return names[6];
  }
}
///////////////////////////////////////////////
/**
 * A switch statement tests a value and can have many case statements which define variouspossible values.
 * Statements are executed from the first matched case value until a break is encountered.
 * A default statement should be the last case.
 */
 function caseInSwitch(val) {
    let answer = "";
   switch(val){
     case 1:
     answer = "alpha";
     break;
     case 2:
     answer = "beta";
     break;
     case 3:
     answer = "gamma";
     break;
     case 4:
     answer = "delta";
     break;
     default:
    answer = "whatever";
   }
    return answer;
  }
  
  caseInSwitch(1);

  //Multiple Identical Options in Switch Statements
  function sequentialSizes(val) {
    let answer = "";
    switch(val){
      case 1:
      case 2:
      case 3:
      answer = "Low";
      break;
      case 4:
      case 5:
      case 6:
      answer = "Mid";
      break;
      case 7:
      case 8:
      case 9:
      answer = "High";
    }
    return answer;
  }
  
  sequentialSizes(1);

  //Returning Boolean Values from Functions
  /**
   * You may recall from Comparison with the Equality Operator
   * that all comparison operators return a boolean true or false value.
    Sometimes people use an if/else statement to do a comparison
   */
  //But there's a better way to do this.
  //Since === returns true or false, we can return the result of the comparison:
  function isEqual(a, b) {
    return a === b;
  }

  //When a return statement is reached, the execution of the current function stops and control returns to the calling location.

  //A counting card example:
  let count = 0;
  function cc(card) {
    var regex = /[JQKA]/;
    if (card > 1 && card < 7) {
      count++;
    } else if (card === 10 || regex.test(card)) {
      count--;
    }
  
    if (count > 0) return count + " Bet";
    return count + " Hold";
  }

  //Conditional (Ternary) Operator
  //The conditional operator, also called the ternary operator, can be used as a one line if-else expression.
  //The syntax is a ? b : c
  
  /**
   * Use the conditional operator in the checkEqual function to check if two numbers are equal or not.
   * The function should return either the string Equal or the string Not Equal.
   */
   function checkEqual(a, b) {
    return a === b? "Equal" : "Not Equal";
  }
  
  checkEqual(1, 2);

  //You can also chain them together to check for multiple conditions.
  function findGreaterOrEqual(a, b) {
    if (a === b) {
      return "a and b are equal";
    }
    else if (a > b) {
      return "a is greater";
    }
    else {
      return "b is greater";
    }
  }

  // is equal to:
  function findGreaterOrEqual(a, b) {
    return (a === b) ? "a and b are equal" 
      : (a > b) ? "a is greater" 
      : "b is greater";
  }

/**
 * It is considered best practice to format multiple conditional operators
 * such that each condition is on a separate line, as shown above. Using multiple conditional
 * operators without proper indentation may make your code hard to read
 */

 function checkSign(num) {
  return (num>0)? "positive"
        :(num<0)? "negative"
        : "zero";
}

checkSign(10);